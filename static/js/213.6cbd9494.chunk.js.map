{"version":3,"file":"static/js/213.6cbd9494.chunk.js","mappings":"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","sources":["components/AdvertsList/AdvertsList.jsx","components/AdvertsFilters/AdvertsFilters.jsx","pages/CatalogPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectAdverts } from '../../redux/adverts/advartsSelectors';\nimport { selectFavoriteAdverts } from '../../redux/favorites/favoritesSelectors';\nimport AdvertCard from '../AdvertCard/AdvertCard';\nimport { AdvertCardListContainer } from './AdvertsList.styled';\n\n\nconst AdvertsList = ({ loadedCount }) => {\n    const data = useSelector(selectAdverts);\n    const favoriteAdverts = useSelector(selectFavoriteAdverts);\n\n    return (\n        <AdvertCardListContainer>\n            {data.slice(0, loadedCount).map(advert => (\n                <AdvertCard\n                    key={advert._id}\n                    advert={advert}\n                    isFavorite={favoriteAdverts.includes(advert._id)}\n                />\n            ))}\n        </AdvertCardListContainer>\n    );\n};\n\nexport default AdvertsList;","import React, { useState } from 'react';\n\nexport const AdvertsFilter = ({ onSearch }) => {\n    const [filterText, setFilterText] = useState('');\n    const [selectedEquipment, setSelectedEquipment] = useState([]);\n    const [selectedType, setSelectedType] = useState('');\n    const [selectedTransmission, setSelectedTransmission] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSearch({\n            filterText,\n            selectedEquipment,\n            selectedType,\n            selectedTransmission\n        });\n    };\n\n    const toggleEquipment = (equipment) => {\n        if (selectedEquipment.includes(equipment)) {\n            setSelectedEquipment(selectedEquipment.filter((item) => item !== equipment));\n        } else {\n            setSelectedEquipment([...selectedEquipment, equipment]);\n        }\n    };\n\n    const toggleTransmission = (transmission) => {\n        setSelectedTransmission(transmission === selectedTransmission ? '' : transmission);\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <input\n                    type=\"text\"\n                    placeholder=\"Search by location\"\n                    value={filterText}\n                    onChange={(e) => setFilterText(e.target.value)}\n                />\n            </div>\n            <div>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        checked={selectedEquipment.includes('airConditioner')}\n                        onChange={() => toggleEquipment('airConditioner')}\n                    />\n                    Air Conditioner\n                </label>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        checked={selectedTransmission === 'automatic'}\n                        onChange={() => toggleTransmission('automatic')}\n                    />\n                    Transmission\n                </label>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        checked={selectedEquipment.includes('kitchen')}\n                        onChange={() => toggleEquipment('kitchen')}\n                    />\n                    Kitchen\n                </label>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        checked={selectedEquipment.includes('TV')}\n                        onChange={() => toggleEquipment('TV')}\n                    />\n                    TV\n                </label>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        checked={selectedEquipment.includes('shower')}\n                        onChange={() => toggleEquipment('shower')}\n                    />\n                    Shower\n                </label>\n            </div>\n            <div>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"type\"\n                        value=\"alcove\"\n                        checked={selectedType === 'alcove'}\n                        onChange={() => setSelectedType('alcove')}\n                    />\n                    Alcove\n                </label>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"type\"\n                        value=\"fullyIntegrated\"\n                        checked={selectedType === 'fullyIntegrated'}\n                        onChange={() => setSelectedType('fullyIntegrated')}\n                    />\n                    Fully Integrated\n                </label>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name=\"type\"\n                        value=\"panelTruck\"\n                        checked={selectedType === 'panelTruck'}\n                        onChange={() => setSelectedType('panelTruck')}\n                    />\n                    Panel Truck\n                </label>\n            </div>\n            <button type=\"submit\">Search</button>\n        </form>\n    );\n};","// import React, { useState } from 'react';\n// import { useSelector } from 'react-redux';\n// import { selectAdverts } from '../redux/adverts/advartsSelectors';\n// import { selectIsLoading, selectIsError } from '../redux/adverts/advartsSelectors';\n// import AdvertCard from '../components/AdvertCard/AdvertCard';\n// import { AdvertsFilter } from '../components/AdvertsFilters/AdvertsFilters';\n// import AdvertsList from '../components/AdvertsList/AdvertsList';\n// import LinearProgress from '@mui/material/LinearProgress';\n// import { PageContainer,  LoadMoreButton} from 'components/GlobalStyles';\n// import { AdvertCardListContainer } from '../components/AdvertsList/AdvertsList.styled';\n\n// const CatalogPage = () => {\n//     const data = useSelector(selectAdverts);\n//     const [filteredData, setFilteredData] = useState([]);\n//     const isLoading = useSelector(selectIsLoading);\n//     const isError = useSelector(selectIsError);\n//     const [loadedCount, setLoadedCount] = useState(4);\n\n//     const handleSearch = ({ filterText, selectedEquipment, selectedType, selectedTransmission }) => {\n//         const newData = data.filter(advert => {\n//             const text = advert.location.toLowerCase().includes(filterText.toLowerCase());\n//             const equipment = selectedEquipment.length === 0 || selectedEquipment.every(equipment => advert.details[equipment]);\n//             const type = !selectedType || advert.form === selectedType;\n//             const transmission = !selectedTransmission || advert.transmission === selectedTransmission;\n//             return text && equipment && type && transmission;\n//         });\n//         setFilteredData(newData);\n//     };\n\n//     const handleLoadMore = () => {\n//         setLoadedCount(prevCount => prevCount + 4);\n//     }\n\n//     return (\n//         <PageContainer>\n//             <h1 hidden>Catalog Page</h1>\n//             <div>{isLoading && !isError && <LinearProgress color='primary' sx={{ mt: 1 }} />}</div>\n\n//             <AdvertsFilter onSearch={handleSearch} />\n\n//             {filteredData.length === 0 ? (\n//                 <AdvertsList loadedCount={loadedCount} />\n//             ) : (\n//                 <AdvertCardListContainer>\n//                     {filteredData.slice(0, loadedCount).map(advert => (\n//                         <AdvertCard\n//                             key={advert._id}\n//                             advert={advert}\n//                         />\n//                     ))}\n//                 </AdvertCardListContainer>\n//             )}\n\n//             {!isLoading && !isError && filteredData.length > loadedCount && (\n//                 <div>\n//                     <LoadMoreButton type=\"button\" onClick={handleLoadMore}>Load more</LoadMoreButton>\n//                 </div>\n//             )}\n//         </PageContainer>\n//     );\n// };\n\n// export default CatalogPage;\n\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectAdverts } from '../redux/adverts/advartsSelectors';\nimport { selectIsLoading, selectIsError } from '../redux/adverts/advartsSelectors';\nimport AdvertCard from '../components/AdvertCard/AdvertCard';\nimport AdvertsList from '../components/AdvertsList/AdvertsList';\nimport { AdvertsFilter } from '../components/AdvertsFilters/AdvertsFilters';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { PageContainer, LoadMoreButton } from 'components/GlobalStyles';\nimport { AdvertCardListContainer } from '../components/AdvertsList/AdvertsList.styled';\n\nconst CatalogPage = () => {\n    const data = useSelector(selectAdverts);\n    const [filteredData, setFilteredData] = useState([]);\n    const isLoading = useSelector(selectIsLoading);\n    const isError = useSelector(selectIsError);\n    const [loadedCount, setLoadedCount] = useState(4);\n\n    const handleSearch = ({ filterText, selectedEquipment, selectedType, selectedTransmission }) => {\n        const newData = data.filter(advert => {\n            const text = advert.location.toLowerCase().includes(filterText.toLowerCase());\n            const equipment = selectedEquipment.length === 0 || selectedEquipment.every(equipment => advert.details[equipment]);\n            const type = !selectedType || advert.form === selectedType;\n            const transmission = !selectedTransmission || advert.transmission === selectedTransmission;\n            return text && equipment && type && transmission;\n        });\n        setFilteredData(newData);\n    };\n\n    const handleLoadMore = () => {\n        setLoadedCount(prevCount => prevCount + 4);\n    };\n\n    return (\n        <PageContainer>\n            <h1 hidden>Catalog Page</h1>\n            <div>{isLoading && !isError && <LinearProgress color='primary' sx={{ mt: 1 }} />}</div>\n\n            <AdvertsFilter onSearch={handleSearch} />\n\n            {filteredData.length === 0 ? (\n                <AdvertsList loadedCount={loadedCount} />\n            ) : (\n                <AdvertCardListContainer>\n                    {filteredData.slice(0, loadedCount).map(advert => (\n                        <AdvertCard\n                            key={advert._id}\n                            advert={advert}\n                        />\n                    ))}\n                </AdvertCardListContainer>\n            )}\n\n            {!isLoading && !isError && filteredData.length > loadedCount && (\n                <div>\n                    <LoadMoreButton type=\"button\" onClick={handleLoadMore}>Load more</LoadMoreButton>\n                </div>\n            )}\n        </PageContainer>\n    );\n};\n\nexport default CatalogPage;\n"],"names":["_ref","loadedCount","data","useSelector","selectAdverts","favoriteAdverts","selectFavoriteAdverts","_jsx","AdvertCardListContainer","children","slice","map","advert","AdvertCard","isFavorite","includes","_id","AdvertsFilter","onSearch","_useState","useState","_useState2","_slicedToArray","filterText","setFilterText","_useState3","_useState4","selectedEquipment","setSelectedEquipment","_useState5","_useState6","selectedType","setSelectedType","_useState7","_useState8","selectedTransmission","setSelectedTransmission","toggleEquipment","equipment","filter","item","concat","_toConsumableArray","_jsxs","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","checked","transmission","name","filteredData","setFilteredData","isLoading","selectIsLoading","isError","selectIsError","setLoadedCount","PageContainer","hidden","LinearProgress","color","sx","mt","newData","text","location","toLowerCase","length","every","details","form","AdvertsList","LoadMoreButton","onClick","prevCount"],"sourceRoot":""}